generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// MULTI-TENANT MODELS
// ============================================================================

model Tenant {
  id           String   @id @default(uuid())
  slug         String   @unique // URL-friendly identifier
  name         String
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  users                User[]
  userTenants          UserTenant[] // Relacionamento muitos-para-muitos
  contacts             Contact[]
  categories           Category[]
  campaigns            Campaign[]
  campaignMessages     CampaignMessage[]
  whatsappSessions     WhatsAppSession[]
  quotas               TenantQuota?
  settings             TenantSettings?
  alerts               Alert[]
  messageTemplates     MessageTemplate[]
  automationFlows      AutomationFlow[]
  integrations         Integration[]
  auditLogs            AuditLog[]
  companies            Company[]
  opportunities        Opportunity[]
  activities           Activity[]
  leads                Lead[]
  chats                Chat[]
  crmNotifications     CRMNotification[]
  preRegisteredMedia   PreRegisteredMedia[]

  @@map("tenants")
}

model TenantQuota {
  id             String   @id @default(uuid())
  tenantId       String   @unique @map("tenant_id")
  maxUsers       Int      @default(10) @map("max_users")
  maxContacts    Int      @default(1000) @map("max_contacts")
  maxCampaigns   Int      @default(50) @map("max_campaigns")
  maxConnections Int      @default(5) @map("max_connections")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_quotas")
}

model TenantSettings {
  id            String   @id @default(uuid())
  tenantId      String   @unique @map("tenant_id")
  openaiApiKey  String?  @map("openai_api_key")
  groqApiKey    String?  @map("groq_api_key")
  customBranding Json?   @map("custom_branding") // Logo, colors, etc
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_settings")
}

// Relacionamento muitos-para-muitos entre User e Tenant
model UserTenant {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tenantId  String   @map("tenant_id")
  role      String   @default("USER") // USER, ADMIN (no contexto deste tenant)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId]) // Um usuário não pode ter duplicatas no mesmo tenant
  @@index([userId])
  @@index([tenantId])
  @@map("user_tenants")
}

model GlobalSettings {
  id              String   @id @default(uuid())
  singleton       Boolean  @default(true) @unique // Ensures only one record
  wahaHost        String   @default("") @map("waha_host")
  wahaApiKey      String   @default("") @map("waha_api_key")
  evolutionHost   String   @default("") @map("evolution_host")
  evolutionApiKey String   @default("") @map("evolution_api_key")
  logoUrl         String?  @map("logo_url")
  faviconUrl      String?  @map("favicon_url")
  iconUrl         String?  @map("icon_url")
  companyName     String?  @map("company_name")
  pageTitle       String?  @map("page_title")
  primaryColor    String?  @map("primary_color")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("global_settings")
}

// ============================================================================
// UPDATED EXISTING MODELS WITH TENANT SUPPORT
// ============================================================================

model Contact {
  id           String   @id @default(uuid())
  nome         String
  telefone     String
  email        String?
  tags         String[]
  observacoes  String?
  categoriaId  String?  @map("categoria_id")
  tenantId     String?  @map("tenant_id") // Optional for backward compatibility
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relations
  categoria Category? @relation(fields: [categoriaId], references: [id], onDelete: SetNull)
  tenant    Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  companyId String?   @map("company_id")
  company   Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
  opportunities Opportunity[]
  activities Activity[]
  convertedFromLeads Lead[]
  chats     Chat[]

  @@index([tenantId])
  @@index([categoriaId])
  @@map("contacts")
}

model Category {
  id          String   @id @default(uuid())
  nome        String
  cor         String
  descricao   String?
  tenantId    String?  @map("tenant_id") // Optional for backward compatibility
  criadoEm    DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  // Relations
  contacts    Contact[]
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("categories")
}

model WhatsAppSession {
  id               String     @id @default(uuid())
  name             String     @unique // Nome real usado na API (ex: vendas_c52982e8)
  displayName      String?    @map("display_name") // Nome exibido ao usuário (ex: vendas)
  status           String
  config           String?
  meId             String?    @map("me_id")
  mePushName       String?    @map("me_push_name")
  meLid            String?    @map("me_lid")
  meJid            String?    @map("me_jid")
  qr               String?
  qrExpiresAt      DateTime?  @map("qr_expires_at")
  assignedWorker   String?    @map("assigned_worker")
  tenantId         String?    @map("tenant_id") // Optional for backward compatibility
  criadoEm         DateTime   @default(now()) @map("criado_em")
  atualizadoEm     DateTime   @updatedAt @map("atualizado_em")
  provider         String     @default("WAHA")
  
  // Campos para gerenciar Webhook vs WebSocket
  webhookEnabled   Boolean    @default(false) @map("webhook_enabled")
  websocketEnabled Boolean    @default(false) @map("websocket_enabled")
  webhookUrl       String?    @map("webhook_url")
  webhookBase64    Boolean?   @map("webhook_base64")
  
  campaigns        Campaign[]

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("whatsapp_sessions")
}

model Campaign {
  id               String            @id @default(uuid())
  nome             String
  targetTags       String
  sessionName      String?           @map("session_name")
  messageType      String            @map("message_type")
  messageContent   String            @map("message_content")
  randomDelay      Int               @map("random_delay")
  startImmediately Boolean           @map("start_immediately")
  scheduledFor     DateTime?         @map("scheduled_for")
  status           String            @default("PENDING")
  totalContacts    Int               @default(0) @map("total_contacts")
  sentCount        Int               @default(0) @map("sent_count")
  failedCount      Int               @default(0) @map("failed_count")
  startedAt        DateTime?         @map("started_at")
  completedAt      DateTime?         @map("completed_at")
  tenantId         String?           @map("tenant_id") // Optional for backward compatibility
  criadoEm         DateTime          @default(now()) @map("criado_em")
  atualizadoEm     DateTime          @updatedAt @map("atualizado_em")
  sessionNames     String?           @map("session_names")
  createdBy        String?           @map("created_by")
  createdByName    String?           @map("created_by_name")
  messages         CampaignMessage[]
  session          WhatsAppSession?  @relation(fields: [sessionName], references: [name])

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("campaigns")
}

model CampaignMessage {
  id                String    @id @default(uuid())
  campaignId        String    @map("campaign_id")
  contactId         String    @map("contact_id")
  contactPhone      String    @map("contact_phone")
  contactName       String    @map("contact_name")
  status            String    @default("PENDING")
  sentAt            DateTime? @map("sent_at")
  deliveredAt       DateTime? @map("delivered_at")
  readAt            DateTime? @map("read_at")
  errorMessage      String?   @map("error_message")
  messageId         String?   @map("message_id")
  selectedVariation String?   @map("selected_variation")
  tenantId          String?   @map("tenant_id") // Optional for backward compatibility
  criadoEm          DateTime  @default(now()) @map("criado_em")
  atualizadoEm      DateTime  @updatedAt @map("atualizado_em")
  sessionName       String?   @map("session_name")
  campaign          Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("campaign_messages")
}

model User {
  id           String    @id @default(uuid())
  nome         String
  email        String    @unique
  senha        String
  role         String    @default("USER") // USER, ADMIN, SUPERADMIN
  ativo        Boolean   @default(true)
  tenantId     String?   @map("tenant_id") // NULL for SUPERADMIN
  ultimoLogin  DateTime? @map("ultimo_login")
  criadoEm     DateTime  @default(now()) @map("criado_em")
  atualizadoEm DateTime  @updatedAt @map("atualizado_em")

  // Relations
  tenant           Tenant?           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenants          UserTenant[]      // Relacionamento muitos-para-muitos com tenants
  alerts           Alert[]
  notifications    Notification[]
  userNotifications UserNotification[]
  createdTemplates MessageTemplate[] @relation("TemplateCreator")
  createdPreRegisteredMedia PreRegisteredMedia[] @relation("PreRegisteredMediaCreator")
  createdFlows     AutomationFlow[]  @relation("FlowCreator")
  createdIntegrations Integration[]   @relation("IntegrationCreator")
  auditLogs        AuditLog[]
  assignedCompanies Company[]
  assignedOpportunities Opportunity[]
  assignedActivities Activity[]
  assignedLeads    Lead[]
  assignedChats    Chat[]              @relation("UserChats")
  crmNotifications CRMNotification[]

  @@index([tenantId])
  @@index([email])
  @@map("users")
}

// ============================================================================
// ALERTS AND NOTIFICATIONS SYSTEM
// ============================================================================

model Alert {
  id          String      @id @default(uuid())
  type        AlertType
  severity    AlertSeverity
  title       String
  message     String
  tenantId    String?     @map("tenant_id") // NULL for system-wide alerts
  userId      String?     @map("user_id")   // NULL for tenant-wide alerts
  metadata    Json?       // Additional data (quota details, error info, etc)
  resolved    Boolean     @default(false)
  resolvedAt  DateTime?   @map("resolved_at")
  resolvedBy  String?     @map("resolved_by")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([tenantId])
  @@index([type, severity])
  @@index([resolved, createdAt])
  @@map("alerts")
}

model Notification {
  id        String            @id @default(uuid())
  alertId   String            @map("alert_id")
  userId    String            @map("user_id")
  method    NotificationMethod
  sent      Boolean           @default(false)
  sentAt    DateTime?         @map("sent_at")
  read      Boolean           @default(false)
  readAt    DateTime?         @map("read_at")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  // Relations
  alert     Alert             @relation(fields: [alertId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([alertId])
  @@map("notifications")
}

enum AlertType {
  QUOTA_WARNING      // Quota usage above 80%
  QUOTA_EXCEEDED     // Quota exceeded
  SYSTEM_ERROR       // System-level errors
  TENANT_INACTIVE    // Tenant marked as inactive
  SESSION_FAILED     // WhatsApp session failures
  CAMPAIGN_FAILED    // Campaign execution failures
  DATABASE_ERROR     // Database connectivity issues
  API_ERROR          // External API failures
  BACKUP_FAILED      // Backup process failures
  SECURITY_ALERT     // Security-related alerts
}

enum AlertSeverity {
  LOW      // Informational
  MEDIUM   // Warning - attention needed
  HIGH     // Error - immediate action required
  CRITICAL // Critical - system impact
}

enum NotificationMethod {
  IN_APP     // In-application notifications
  EMAIL      // Email notifications (future)
  WEBHOOK    // Webhook notifications (future)
}

// ============================================================================
// USER NOTIFICATIONS FOR REAL-TIME SYSTEM
// ============================================================================

model UserNotification {
  id        String                   @id @default(uuid())
  userId    String                   @map("user_id")
  title     String
  message   String
  type      UserNotificationType
  data      Json?                    // Additional context data
  read      Boolean                  @default(false)
  readAt    DateTime?                @map("read_at")
  createdAt DateTime                 @default(now()) @map("created_at")
  updatedAt DateTime                 @updatedAt @map("updated_at")

  // Relations
  user      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
  @@map("user_notifications")
}

enum UserNotificationType {
  INFO      // Informational notifications
  SUCCESS   // Success notifications
  WARNING   // Warning notifications
  ERROR     // Error notifications
  CAMPAIGN  // Campaign-related notifications
  BACKUP    // Backup-related notifications
  SYSTEM    // System-related notifications
}

// ============================================================================
// MESSAGE TEMPLATES SYSTEM
// ============================================================================

model MessageTemplate {
  id          String      @id @default(uuid())
  name        String
  tenantId    String      @map("tenant_id")
  category    String
  messageType MessageType @map("message_type")
  content     String      @db.Text
  variables   String[]    // List of variables in template like ['nome', 'empresa']
  mediaUrl    String?     @map("media_url")
  active      Boolean     @default(true)
  tags        String[]
  description String?     @db.Text
  createdBy   String      @map("created_by")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User        @relation("TemplateCreator", fields: [createdBy], references: [id])

  @@index([tenantId])
  @@index([category])
  @@index([messageType])
  @@index([active])
  @@map("message_templates")
}

enum MessageType {
  TEXT      // Plain text messages
  IMAGE     // Image messages
  DOCUMENT  // Document messages
  VIDEO     // Video messages
  AUDIO     // Audio messages
}

// ============================================================================
// PRÉ-CADASTRADAS PARA CRM
// ============================================================================

model PreRegisteredMedia {
  id          String    @id @default(uuid())
  name        String    // Nome da mídia (ex: "Catálogo Verão", "Áudio Pagamento")
  description String?   @db.Text // Descrição da mídia
  category    String    // Categoria (ex: "Produtos", "Pagamento", "Promoções")
  type        MediaType // Tipo da mídia
  mediaUrl    String    @map("media_url") // URL do arquivo
  thumbnailUrl String?  @map("thumbnail_url") // URL da thumbnail (para vídeos/imagens)
  fileSize    Int?      @map("file_size") // Tamanho do arquivo em bytes
  mimeType    String?   @map("mime_type") // Tipo MIME do arquivo
  tags        String[]  // Tags para busca
  isActive    Boolean   @default(true) @map("is_active")
  usageCount  Int       @default(0) @map("usage_count") // Quantas vezes foi usada
  tenantId    String    @map("tenant_id")
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User      @relation("PreRegisteredMediaCreator", fields: [createdBy], references: [id])

  @@index([tenantId])
  @@index([category])
  @@index([type])
  @@index([isActive])
  @@index([tags])
  @@map("pre_registered_media")
}

enum MediaType {
  IMAGE     // Imagens
  VIDEO     // Vídeos
  AUDIO     // Áudios
  DOCUMENT  // Documentos
}

// ============================================================================
// AUTOMATION AND WORKFLOW SYSTEM
// ============================================================================

model AutomationFlow {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  tenantId    String    @map("tenant_id")
  active      Boolean   @default(true)
  trigger     Json      // Trigger configuration
  conditions  Json?     // Conditions configuration
  actions     Json      // Actions configuration
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant     Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator    User                 @relation("FlowCreator", fields: [createdBy], references: [id])
  executions AutomationExecution[]

  @@index([tenantId])
  @@index([active])
  @@map("automation_flows")
}

model AutomationExecution {
  id         String    @id @default(uuid())
  flowId     String    @map("flow_id")
  status     String    // SUCCESS, FAILED, RUNNING
  executedAt DateTime  @map("executed_at")
  context    Json?     // Execution context data
  error      String?   @db.Text
  duration   Int?      // Execution duration in milliseconds

  // Relations
  flow       AutomationFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId])
  @@index([executedAt])
  @@index([status])
  @@map("automation_executions")
}

// ============================================================================
// INTEGRATIONS SYSTEM
// ============================================================================

model Integration {
  id            String           @id @default(uuid())
  name          String
  type          IntegrationType
  tenantId      String           @map("tenant_id")
  active        Boolean          @default(true)
  config        Json             // Integration-specific configuration
  credentials   Json?            // Encrypted credentials
  webhookUrl    String?          @map("webhook_url")
  lastSyncAt    DateTime?        @map("last_sync_at")
  lastError     String?          @map("last_error") @db.Text
  createdBy     String           @map("created_by")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relations
  tenant        Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User             @relation("IntegrationCreator", fields: [createdBy], references: [id])
  syncLogs      IntegrationSync[]

  @@index([tenantId])
  @@index([type])
  @@index([active])
  @@map("integrations")
}

model IntegrationSync {
  id            String      @id @default(uuid())
  integrationId String      @map("integration_id")
  type          String      // sync_contacts, sync_campaigns, webhook_received
  status        String      // SUCCESS, FAILED, RUNNING
  recordsCount  Int?        @map("records_count")
  errorMessage  String?     @map("error_message") @db.Text
  metadata      Json?       // Sync-specific metadata
  startedAt     DateTime    @map("started_at")
  completedAt   DateTime?   @map("completed_at")

  // Relations
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([startedAt])
  @@index([status])
  @@map("integration_syncs")
}

enum IntegrationType {
  WEBHOOK      // Generic webhook integration
  ZAPIER       // Zapier integration
  CRM          // CRM systems (Salesforce, HubSpot, etc)
  ERP          // ERP systems (SAP, Oracle, etc)
  ECOMMERCE    // E-commerce platforms (Shopify, WooCommerce, etc)
  EMAIL        // Email marketing platforms (Mailchimp, Constant Contact)
  CALENDAR     // Calendar systems (Google Calendar, Outlook)
  STORAGE      // Cloud storage (Google Drive, Dropbox)
  ANALYTICS    // Analytics platforms (Google Analytics, Mixpanel)
  CUSTOM       // Custom API integrations
}

// Settings model is now split into GlobalSettings and TenantSettings
// This will be handled by a migration

model AuditLog {
  id          String   @id @default(uuid())
  action      String   // AuditAction enum value
  severity    String   // AuditSeverity enum value
  tenantId    String
  userId      String?
  entityType  String?  // Type of entity being audited (User, Contact, Campaign, etc.)
  entityId    String?  // ID of the entity being audited
  details     Json     // Detailed information about the action
  ipAddress   String?
  userAgent   String?
  metadata    Json?    // Additional metadata
  timestamp   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@index([entityType, entityId])
  @@map("audit_logs")
}

// ============================================================================
// CRM MODELS - OPPORTUNITIES AND PIPELINE
// ============================================================================

model Company {
  id              String      @id @default(uuid())
  tenantId        String      @map("tenant_id")
  name            String
  industry        String?
  size            CompanySize?
  website         String?
  phone           String?
  email           String?
  address         Json?       // Endereço completo
  description     String?     @db.Text
  tags            String[]
  customFields    Json?       @map("custom_fields")
  assignedTo      String?     @map("assigned_to")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contacts        Contact[]
  opportunities   Opportunity[]
  assignedUser    User?       @relation(fields: [assignedTo], references: [id])
  
  @@index([tenantId])
  @@index([assignedTo])
  @@map("companies")
}

model Opportunity {
  id              String           @id @default(uuid())
  tenantId        String           @map("tenant_id")
  contactId       String?          @map("contact_id")
  companyId       String?          @map("company_id")
  title           String
  value           Decimal          @db.Decimal(12,2)
  stage           OpportunityStage
  probability     Int              // 0-100%
  expectedClose   DateTime?        @map("expected_close")
  actualClose     DateTime?        @map("actual_close")
  source          String?          // Lead source
  description     String?          @db.Text
  assignedTo      String?          @map("assigned_to")
  tags            String[]
  customFields    Json?            @map("custom_fields")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  
  // Relations
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contact         Contact?         @relation(fields: [contactId], references: [id], onDelete: SetNull)
  company         Company?         @relation(fields: [companyId], references: [id], onDelete: SetNull)
  assignedUser    User?            @relation(fields: [assignedTo], references: [id])
  activities      Activity[]
  
  @@index([tenantId])
  @@index([contactId])
  @@index([companyId])
  @@index([assignedTo])
  @@index([stage])
  @@map("opportunities")
}

model Activity {
  id              String        @id @default(uuid())
  tenantId        String        @map("tenant_id")
  contactId       String?       @map("contact_id")
  opportunityId   String?       @map("opportunity_id")
  type            ActivityType
  subject         String
  description     String?       @db.Text
  dueDate         DateTime?     @map("due_date")
  completedAt     DateTime?     @map("completed_at")
  assignedTo      String        @map("assigned_to")
  priority        Priority
  status          ActivityStatus
  metadata        Json?         // Dados específicos da atividade
  createdAt       DateTime      @default(now()) @map("created_at")
  
  // Relations
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contact         Contact?      @relation(fields: [contactId], references: [id], onDelete: SetNull)
  opportunity     Opportunity?  @relation(fields: [opportunityId], references: [id], onDelete: SetNull)
  assignedUser    User          @relation(fields: [assignedTo], references: [id])
  
  @@index([tenantId])
  @@index([contactId])
  @@index([opportunityId])
  @@index([assignedTo])
  @@index([type, status])
  @@map("activities")
}

model Lead {
  id              String      @id @default(uuid())
  tenantId        String      @map("tenant_id")
  firstName       String      @map("first_name")
  lastName        String      @map("last_name")
  email           String
  phone           String?
  company         String?
  source          LeadSource
  status          LeadStatus
  score           Int         @default(0)
  tags            String[]
  customFields    Json?       @map("custom_fields")
  assignedTo      String?     @map("assigned_to")
  convertedAt     DateTime?   @map("converted_at")
  convertedToContactId String? @map("converted_to_contact_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedUser    User?       @relation(fields: [assignedTo], references: [id])
  convertedToContact Contact? @relation(fields: [convertedToContactId], references: [id], onDelete: SetNull)
  chats           Chat[]
  
  @@index([tenantId])
  @@index([assignedTo])
  @@index([status])
  @@index([source])
  @@map("leads")
}

// ============================================================================
// CRM ENUMS
// ============================================================================

enum CompanySize {
  STARTUP        // 1-10 funcionários
  SMALL          // 11-50 funcionários
  MEDIUM         // 51-200 funcionários
  LARGE          // 201-1000 funcionários
  ENTERPRISE     // 1000+ funcionários
}

enum OpportunityStage {
  PROSPECT        // Prospecto inicial
  QUALIFIED       // Qualificado
  PROPOSAL        // Proposta enviada
  NEGOTIATION     // Negociação
  CLOSED_WON      // Ganha
  CLOSED_LOST     // Perdida
  ON_HOLD         // Em espera
}

enum ActivityType {
  CALL         // Ligação
  EMAIL        // Email
  MEETING      // Reunião
  TASK         // Tarefa
  WHATSAPP     // Mensagem WhatsApp
  NOTE         // Anotação
  FOLLOW_UP    // Follow-up
  PROPOSAL     // Proposta
  DEMO         // Demonstração
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityStatus {
  PENDING       // Pendente
  IN_PROGRESS   // Em andamento
  COMPLETED     // Concluída
  CANCELLED     // Cancelada
}

enum LeadSource {
  WEBSITE         // Site
  SOCIAL_MEDIA    // Redes sociais
  REFERRAL        // Indicação
  COLD_CALL       // Ligação fria
  EMAIL_CAMPAIGN  // Campanha email
  WHATSAPP_CAMPAIGN // Campanha WhatsApp
  EVENT           // Evento
  ADS             // Anúncios
  OTHER           // Outro
}

enum LeadStatus {
  NEW             // Novo
  CONTACTED       // Contatado
  QUALIFIED       // Qualificado
  PROPOSAL        // Proposta
  NEGOTIATION     // Negociação
  CONVERTED       // Convertido
  LOST            // Perdido
}

// ============================================================================
// CHAT AND MESSAGING SYSTEM
// ============================================================================

model Chat {
  id              String     @id @default(uuid())
  tenantId        String     @map("tenant_id")
  phone           String     // Telefone do cliente (com código do país)
  whatsappChatId  String?    @map("whatsapp_chat_id") // ChatId original do WhatsApp (ex: 556295473360@c.us)
  contactName     String?    @map("contact_name") // Nome do contato
  profilePicture  String?    @map("profile_picture") // URL da foto de perfil
  contactId       String?    @map("contact_id")
  leadId          String?    @map("lead_id")
  assignedTo      String?    @map("assigned_to")
  lastMessage     String?    @db.Text @map("last_message")
  lastMessageAt   DateTime?  @map("last_message_at")
  unreadCount     Int        @default(0) @map("unread_count")
  status          ChatStatus @default(OPEN)
  sessionId       String?    @map("session_id") // ID da sessão WhatsApp
  isSyncing       Boolean    @default(false) @map("is_syncing") // Indica se está sincronizando histórico
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  
  // Relations
  tenant          Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contact         Contact?   @relation(fields: [contactId], references: [id], onDelete: SetNull)
  lead            Lead?      @relation(fields: [leadId], references: [id], onDelete: SetNull)
  assignedUser    User?      @relation("UserChats", fields: [assignedTo], references: [id], onDelete: SetNull)
  messages        Message[]
  
  @@unique([tenantId, phone]) // Um chat por telefone por tenant
  @@index([tenantId])
  @@index([contactId])
  @@index([leadId])
  @@index([assignedTo])
  @@index([status])
  @@index([lastMessageAt])
  @@map("chats")
}

model Message {
  id              String      @id @default(uuid())
  chatId          String      @map("chat_id")
  phone           String      // Telefone do remetente/destinatário
  fromMe          Boolean     @map("from_me") // true = enviada, false = recebida
  body            String?     @db.Text
  mediaUrl        String?     @map("media_url")
  type            ChatMessageType @default(TEXT)
  timestamp       DateTime    // Data/hora da mensagem
  ack             Int?        // Status de entrega (0=pending, 1=sent, 2=delivered, 3=read)
  messageId       String?     @map("message_id") // ID da mensagem no WhatsApp
  quotedMsgId     String?     @map("quoted_msg_id") // ID da mensagem citada
  metadata        Json?       // Metadados adicionais
  createdAt       DateTime    @default(now()) @map("created_at")
  
  // Relations
  chat            Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@index([chatId])
  @@index([timestamp])
  @@index([fromMe])
  @@map("messages")
}

// ============================================================================
// CRM NOTIFICATIONS SYSTEM
// ============================================================================

model CRMNotification {
  id          String                  @id @default(uuid())
  tenantId    String                  @map("tenant_id")
  userId      String                  @map("user_id")
  type        CRMNotificationType
  title       String
  message     String                  @db.Text
  link        String?                 // URL para redirecionar
  data        Json?                   // Dados adicionais
  read        Boolean                 @default(false)
  readAt      DateTime?               @map("read_at")
  createdAt   DateTime                @default(now()) @map("created_at")
  
  // Relations
  tenant      Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("crm_notifications")
}

// ============================================================================
// CHAT AND NOTIFICATION ENUMS
// ============================================================================

enum ChatStatus {
  OPEN            // Aberto/Ativo
  RESOLVED        // Resolvido/Fechado
  PENDING         // Aguardando resposta
  ARCHIVED        // Arquivado
}

enum ChatMessageType {
  TEXT            // Mensagem de texto
  IMAGE           // Imagem
  AUDIO           // Áudio
  VOICE           // Nota de voz
  VIDEO           // Vídeo
  DOCUMENT        // Documento
  STICKER         // Sticker
  LOCATION        // Localização
  CONTACT         // Contato
  LINK            // Link
  OTHER           // Outro tipo
}

enum CRMNotificationType {
  NEW_MESSAGE     // Nova mensagem recebida
  ACTIVITY_DUE    // Atividade próxima do vencimento
  OPPORTUNITY_UPDATE // Oportunidade atualizada
  LEAD_HOT        // Lead quente
  ACTIVITY_COMPLETED // Atividade concluída
  CHAT_ASSIGNED   // Chat atribuído
  SYSTEM          // Notificação do sistema
  INFO            // Informação geral
}