import { io, Socket } from 'socket.io-client';
import { PrismaClient } from '@prisma/client';
import { websocketService } from './websocketService';
import { mediaProcessingService } from './mediaProcessingService';

const prisma = new PrismaClient();

/**
 * Servi√ßo para conectar ao WebSocket da Evolution API e receber eventos em tempo real
 */
class EvolutionWebSocketClient {
  private connections: Map<string, Socket> = new Map();
  private reconnectAttempts: Map<string, number> = new Map();
  private maxReconnectAttempts = 5;

  /**
   * Conecta a uma inst√¢ncia Evolution via WebSocket
   * @param instanceName Nome da inst√¢ncia
   * @param tenantId ID do tenant
   * @param evolutionHost URL base da Evolution API (ex: https://evo.usezap.com.br)
   * @param apiKey API Key da Evolution
   */
  async connectInstance(
    instanceName: string,
    tenantId: string,
    evolutionHost: string,
    apiKey: string
  ): Promise<void> {
    // Evitar conex√µes duplicadas
    if (this.connections.has(instanceName)) {
      console.log(`‚ö†Ô∏è [WebSocket] Inst√¢ncia ${instanceName} j√° conectada`);
      return;
    }

    try {
      console.log(`üîå [WebSocket] Conectando √† inst√¢ncia: ${instanceName}`);
      console.log(`üì° [WebSocket] Host: ${evolutionHost}`);

      // Conectar ao WebSocket da Evolution
      const socket = io(`${evolutionHost}/${instanceName}`, {
        transports: ['websocket'],
        auth: {
          apikey: apiKey
        },
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax: 5000,
        reconnectionAttempts: this.maxReconnectAttempts
      });

      // =================================================================
      // EVENTOS DE CONEX√ÉO
      // =================================================================

      socket.on('connect', () => {
        console.log(`‚úÖ [WebSocket] Conectado: ${instanceName}`);
        console.log(`üÜî [WebSocket] Socket ID: ${socket.id}`);
        this.reconnectAttempts.set(instanceName, 0);
      });

      socket.on('connect_error', (error) => {
        console.error(
          `‚ùå [WebSocket] Erro de conex√£o: ${instanceName}`,
          error.message
        );
        const attempts = this.reconnectAttempts.get(instanceName) || 0;
        this.reconnectAttempts.set(instanceName, attempts + 1);

        if (attempts >= this.maxReconnectAttempts) {
          console.error(
            `üö´ [WebSocket] M√°ximo de tentativas atingido: ${instanceName}`
          );
          this.disconnectInstance(instanceName);
        }
      });

      socket.on('disconnect', (reason) => {
        console.log(
          `‚ö†Ô∏è [WebSocket] Desconectado: ${instanceName}, Motivo: ${reason}`
        );
        this.connections.delete(instanceName);
      });

      socket.on('error', (error) => {
        console.error(`‚ùå [WebSocket] Erro: ${instanceName}`, error);
      });

      // =================================================================
      // EVENTOS EVOLUTION API
      // =================================================================

      // Evento de inicializa√ß√£o da aplica√ß√£o
      socket.on('application.startup', (data) => {
        console.log(
          `üöÄ [WebSocket] APPLICATION_STARTUP:`,
          JSON.stringify(data, null, 2)
        );
      });

      // QR Code atualizado
      socket.on('qrcode.updated', async (data) => {
        console.log(
          `üì± [WebSocket] QRCODE_UPDATED:`,
          JSON.stringify(data, null, 2)
        );
        await this.handleQRCodeUpdate(data, instanceName, tenantId);
      });

      // Status de conex√£o atualizado
      socket.on('connection.update', async (data) => {
        console.log(
          `üîÑ [WebSocket] CONNECTION_UPDATE:`,
          JSON.stringify(data, null, 2)
        );
        await this.handleConnectionUpdate(data, instanceName, tenantId);
      });

      // Mensagens recebidas/enviadas (UPSERT)
      socket.on('messages.upsert', async (data) => {
        console.log(
          `üì® [WebSocket] MESSAGES_UPSERT:`,
          JSON.stringify(data, null, 2)
        );
        await this.handleMessageUpsert(data, instanceName, tenantId);
      });

      // Mensagens atualizadas (status, edi√ß√£o, etc)
      socket.on('messages.update', async (data) => {
        console.log(
          `‚úèÔ∏è [WebSocket] MESSAGES_UPDATE:`,
          JSON.stringify(data, null, 2)
        );
        await this.handleMessageUpdate(data, instanceName, tenantId);
      });

      // Mensagens deletadas
      socket.on('messages.delete', async (data) => {
        console.log(
          `üóëÔ∏è [WebSocket] MESSAGES_DELETE:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Mensagem enviada (confirma√ß√£o)
      socket.on('send.message', async (data) => {
        console.log(
          `üì§ [WebSocket] SEND_MESSAGE:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Chats recebidos (SET - sincroniza√ß√£o inicial)
      socket.on('chats.set', async (data) => {
        console.log(`üí¨ [WebSocket] CHATS_SET:`, JSON.stringify(data, null, 2));
      });

      // Novos chats (UPSERT)
      socket.on('chats.upsert', async (data) => {
        console.log(
          `‚ûï [WebSocket] CHATS_UPSERT:`,
          JSON.stringify(data, null, 2)
        );
        await this.handleChatUpsert(data, instanceName, tenantId);
      });

      // Chats atualizados
      socket.on('chats.update', async (data) => {
        console.log(
          `üîÑ [WebSocket] CHATS_UPDATE:`,
          JSON.stringify(data, null, 2)
        );
        await this.handleChatUpdate(data, instanceName, tenantId);
      });

      // Chats deletados
      socket.on('chats.delete', async (data) => {
        console.log(
          `üóëÔ∏è [WebSocket] CHATS_DELETE:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Contatos recebidos (SET)
      socket.on('contacts.set', async (data) => {
        console.log(
          `üë• [WebSocket] CONTACTS_SET:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Novos contatos (UPSERT)
      socket.on('contacts.upsert', async (data) => {
        console.log(
          `üë§ [WebSocket] CONTACTS_UPSERT:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Contatos atualizados
      socket.on('contacts.update', async (data) => {
        console.log(
          `‚úèÔ∏è [WebSocket] CONTACTS_UPDATE:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Presen√ßa (online/offline/typing)
      socket.on('presence.update', async (data) => {
        console.log(
          `üëÅÔ∏è [WebSocket] PRESENCE_UPDATE:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Grupos criados/atualizados
      socket.on('groups.upsert', async (data) => {
        console.log(
          `üë• [WebSocket] GROUPS_UPSERT:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Grupo atualizado
      socket.on('group.update', async (data) => {
        console.log(
          `üîÑ [WebSocket] GROUP_UPDATE:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Participantes do grupo atualizados
      socket.on('group.participants.update', async (data) => {
        console.log(
          `üë• [WebSocket] GROUP_PARTICIPANTS_UPDATE:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Chamadas
      socket.on('call', async (data) => {
        console.log(`üìû [WebSocket] CALL:`, JSON.stringify(data, null, 2));
      });

      // Labels (etiquetas)
      socket.on('labels.edit', async (data) => {
        console.log(
          `üè∑Ô∏è [WebSocket] LABELS_EDIT:`,
          JSON.stringify(data, null, 2)
        );
      });

      socket.on('labels.association', async (data) => {
        console.log(
          `üè∑Ô∏è [WebSocket] LABELS_ASSOCIATION:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Typebot eventos
      socket.on('typebot.start', async (data) => {
        console.log(
          `ü§ñ [WebSocket] TYPEBOT_START:`,
          JSON.stringify(data, null, 2)
        );
      });

      socket.on('typebot.change.status', async (data) => {
        console.log(
          `ü§ñ [WebSocket] TYPEBOT_CHANGE_STATUS:`,
          JSON.stringify(data, null, 2)
        );
      });

      // Evento gen√©rico (captura qualquer evento n√£o mapeado)
      socket.onAny((eventName, ...args) => {
        if (
          !eventName.startsWith('connect') &&
          !eventName.startsWith('disconnect') &&
          !eventName.startsWith('error')
        ) {
          console.log(
            `‚ùì [WebSocket] EVENTO N√ÉO MAPEADO: ${eventName}`,
            JSON.stringify(args, null, 2)
          );
        }
      });

      // Salvar conex√£o
      this.connections.set(instanceName, socket);
      console.log(`‚úÖ [WebSocket] Inst√¢ncia registrada: ${instanceName}`);
    } catch (error: any) {
      console.error(`‚ùå [WebSocket] Erro ao conectar ${instanceName}:`, error);
      throw error;
    }
  }

  // =================================================================
  // HANDLERS DE EVENTOS
  // =================================================================

  /**
   * Processa atualiza√ß√£o de QR Code
   */
  private async handleQRCodeUpdate(
    data: any,
    instanceName: string,
    tenantId: string
  ): Promise<void> {
    try {
      const qrCode = data.qrcode || data.qr || data.base64;

      if (!qrCode) {
        console.warn(`‚ö†Ô∏è [WebSocket] QR Code vazio para ${instanceName}`);
        return;
      }

      // Atualizar sess√£o no banco
      await prisma.whatsAppSession.updateMany({
        where: {
          name: instanceName,
          tenantId
        },
        data: {
          qr: qrCode,
          status: 'SCAN_QR_CODE',
          qrExpiresAt: new Date(Date.now() + 60000) // 1 minuto
        }
      });

      // Emitir para frontend via Socket.IO
      websocketService.emitToTenant(tenantId, 'whatsapp:qrcode', {
        instanceName,
        qrCode
      });

      console.log(`‚úÖ [WebSocket] QR Code atualizado: ${instanceName}`);
    } catch (error) {
      console.error(`‚ùå [WebSocket] Erro ao processar QR Code:`, error);
    }
  }

  /**
   * Processa atualiza√ß√£o de status de conex√£o
   */
  private async handleConnectionUpdate(
    data: any,
    instanceName: string,
    tenantId: string
  ): Promise<void> {
    try {
      const state = data.state || data.connection || data.status;

      console.log(`üîÑ [WebSocket] Status de conex√£o ${instanceName}: ${state}`);

      let newStatus = 'STOPPED';

      if (state === 'open' || state === 'connected') {
        newStatus = 'WORKING';
      } else if (state === 'connecting') {
        newStatus = 'INITIALIZING';
      } else if (state === 'close' || state === 'closed') {
        newStatus = 'STOPPED';
      }

      // Atualizar sess√£o no banco
      await prisma.whatsAppSession.updateMany({
        where: {
          name: instanceName,
          tenantId
        },
        data: {
          status: newStatus as any,
          ...(newStatus === 'WORKING' && { qr: null, qrExpiresAt: null })
        }
      });

      // Emitir para frontend
      websocketService.emitToTenant(tenantId, 'whatsapp:connection', {
        instanceName,
        status: newStatus,
        state
      });

      console.log(
        `‚úÖ [WebSocket] Status atualizado: ${instanceName} -> ${newStatus}`
      );
    } catch (error) {
      console.error(`‚ùå [WebSocket] Erro ao processar conex√£o:`, error);
    }
  }

  /**
   * Processa nova mensagem ou mensagem atualizada
   */
  private async handleMessageUpsert(
    data: any,
    instanceName: string,
    tenantId: string
  ): Promise<void> {
    try {
      // ‚úÖ VERIFICAR SE WEBSOCKET EST√Å ATIVO ANTES DE PROCESSAR
      const session = await prisma.whatsAppSession.findFirst({
        where: {
          name: instanceName,
          tenantId
        }
      });

      if (!session) {
        console.log(`‚ùå [WebSocket] Sess√£o ${instanceName} n√£o encontrada`);
        return;
      }

      if (!session.websocketEnabled) {
        console.log(
          `‚ö†Ô∏è [WebSocket] Sess√£o ${instanceName} com websocket DESATIVADO - ignorando mensagem`
        );
        console.log(`   ‚Üí webhookEnabled: ${session.webhookEnabled}`);
        console.log(
          `   ‚Üí Para processar via websocket, ative em "Modo de Conex√£o"`
        );
        return;
      }

      console.log(
        `‚úÖ [WebSocket] Sess√£o ${instanceName} com websocket ATIVO - processando mensagem`
      );

      console.log(
        `üì® [WebSocket] handleMessageUpsert recebido:`,
        JSON.stringify(data, null, 2).substring(0, 500)
      );

      // ‚úÖ Evolution envia evento com estrutura: { event, instance, data: {...} }
      // Extrair os dados corretos
      const messageData = data.data || data;
      const messages =
        messageData.messages ||
        (Array.isArray(messageData) ? messageData : [messageData]);

      for (const message of messages) {
        const remoteJid = message.key?.remoteJid;
        const fromMe = message.key?.fromMe || false;
        const messageId = message.key?.id;

        console.log(
          `üìù [WebSocket] Processando mensagem: ${messageId} de ${remoteJid}`
        );

        if (!remoteJid) {
          console.warn(`‚ö†Ô∏è [WebSocket] Mensagem sem remoteJid`);
          continue;
        }

        // Extrair phone correto (remetente/destinat√°rio)
        const isGroup = remoteJid.includes('@g.us');
        const phone = isGroup
          ? remoteJid
          : remoteJid.replace('@s.whatsapp.net', '');

        console.log(
          `üì± [WebSocket] Phone extra√≠do: ${phone} (isGroup: ${isGroup})`
        );

        // Buscar ou criar chat
        let chat = await prisma.chat.findFirst({
          where: {
            phone: phone,
            tenantId
          }
        });

        if (!chat) {
          // Criar chat automaticamente
          const contactName = message.pushName || phone || 'Desconhecido';

          console.log(
            `‚ûï [WebSocket] Criando novo chat para ${phone} (${contactName})`
          );

          // Buscar sess√£o da inst√¢ncia para associar ao chat
          const session = await prisma.whatsAppSession.findFirst({
            where: {
              name: instanceName,
              tenantId
            }
          });

          chat = await prisma.chat.create({
            data: {
              phone: phone,
              contactName: contactName,
              tenantId,
              status: 'OPEN',
              sessionId: session?.id, // ‚úÖ Associar sess√£o ao chat
              lastMessageAt: new Date()
            }
          });

          console.log(`‚úÖ [WebSocket] Chat criado automaticamente: ${chat.id}`);
        }

        // Extrair conte√∫do da mensagem
        let messageContent =
          message.message?.conversation ||
          message.message?.extendedTextMessage?.text ||
          message.message?.imageMessage?.caption ||
          message.message?.videoMessage?.caption ||
          '[M√≠dia]';

        console.log(`üí¨ [WebSocket] Conte√∫do da mensagem: ${messageContent}`);

        // Determinar tipo da mensagem
        let messageType: any = 'TEXT';
        if (message.message?.imageMessage) messageType = 'IMAGE';
        else if (message.message?.videoMessage) messageType = 'VIDEO';
        else if (message.message?.audioMessage) messageType = 'AUDIO';
        else if (message.message?.documentMessage) messageType = 'DOCUMENT';

        // Extrair URL de m√≠dia se houver
        let mediaUrl: string | null = null;
        let mediaFileName: string | null = null;

        // Processar m√≠dia (URL ou Base64)
        if (message.message?.imageMessage) {
          const imageMsg = message.message.imageMessage;
          mediaFileName = imageMsg.fileName || 'imagem.jpg';

          // Se tiver Base64, converter e salvar
          if (imageMsg.base64) {
            console.log(
              `üñºÔ∏è [WebSocket] Imagem em Base64 recebida, convertendo...`
            );
            try {
              const savedFile = await mediaProcessingService.saveBase64AsFile(
                imageMsg.base64,
                imageMsg.mimetype || 'image/jpeg',
                mediaFileName || undefined
              );
              mediaUrl = savedFile.url;
              console.log(
                `‚úÖ [WebSocket] Imagem salva localmente: ${mediaUrl}`
              );
            } catch (error) {
              console.error(
                '‚ùå [WebSocket] Erro ao salvar imagem Base64:',
                error
              );
            }
          }
          // Se n√£o tiver Base64, a URL encriptada do WhatsApp √© in√∫til
          else {
            console.warn(
              `‚ö†Ô∏è [WebSocket] Imagem sem Base64 - Configure webhook_base64: true na Evolution API`
            );
            console.warn(
              `‚ö†Ô∏è [WebSocket] URL encriptada do WhatsApp n√£o pode ser usada: ${imageMsg.url || imageMsg.directPath}`
            );
          }
        } else if (message.message?.videoMessage) {
          const videoMsg = message.message.videoMessage;
          mediaFileName = videoMsg.fileName || 'video.mp4';

          if (videoMsg.base64) {
            console.log(
              `üé• [WebSocket] V√≠deo em Base64 recebido, convertendo...`
            );
            try {
              const savedFile = await mediaProcessingService.saveBase64AsFile(
                videoMsg.base64,
                videoMsg.mimetype || 'video/mp4',
                mediaFileName || undefined
              );
              mediaUrl = savedFile.url;
              console.log(`‚úÖ [WebSocket] V√≠deo salvo localmente: ${mediaUrl}`);
            } catch (error) {
              console.error(
                '‚ùå [WebSocket] Erro ao salvar v√≠deo Base64:',
                error
              );
            }
          } else {
            console.warn(
              `‚ö†Ô∏è [WebSocket] V√≠deo sem Base64 - Configure webhook_base64: true na Evolution API`
            );
            console.warn(
              `‚ö†Ô∏è [WebSocket] URL encriptada do WhatsApp n√£o pode ser usada: ${videoMsg.url || videoMsg.directPath}`
            );
          }
        } else if (message.message?.audioMessage) {
          const audioMsg = message.message.audioMessage;
          mediaFileName = audioMsg.fileName || 'audio.ogg';

          if (audioMsg.base64) {
            console.log(
              `üéµ [WebSocket] √Åudio em Base64 recebido, convertendo...`
            );
            try {
              const savedFile = await mediaProcessingService.saveBase64AsFile(
                audioMsg.base64,
                audioMsg.mimetype || 'audio/ogg',
                mediaFileName || undefined
              );
              mediaUrl = savedFile.url;
              console.log(`‚úÖ [WebSocket] √Åudio salvo localmente: ${mediaUrl}`);
            } catch (error) {
              console.error(
                '‚ùå [WebSocket] Erro ao salvar √°udio Base64:',
                error
              );
            }
          } else {
            console.warn(
              `‚ö†Ô∏è [WebSocket] √Åudio sem Base64 - Configure webhook_base64: true na Evolution API`
            );
            console.warn(
              `‚ö†Ô∏è [WebSocket] URL encriptada do WhatsApp n√£o pode ser usada: ${audioMsg.url || audioMsg.directPath}`
            );
          }
        } else if (message.message?.documentMessage) {
          const docMsg = message.message.documentMessage;
          mediaFileName = docMsg.fileName || docMsg.title || 'documento.pdf';

          if (docMsg.base64) {
            console.log(
              `üìÑ [WebSocket] Documento em Base64 recebido, convertendo...`
            );
            try {
              const savedFile = await mediaProcessingService.saveBase64AsFile(
                docMsg.base64,
                docMsg.mimetype || 'application/pdf',
                mediaFileName || undefined
              );
              mediaUrl = savedFile.url;
              console.log(`‚úÖ [WebSocket] Documento salvo: ${mediaUrl}`);
            } catch (error) {
              console.error(
                '‚ùå [WebSocket] Erro ao salvar documento Base64:',
                error
              );
            }
          } else {
            console.warn(
              `‚ö†Ô∏è [WebSocket] Documento sem Base64 - Configure webhook_base64: true na Evolution API`
            );
            console.warn(
              `‚ö†Ô∏è [WebSocket] URL encriptada do WhatsApp n√£o pode ser usada: ${docMsg.url || docMsg.directPath}`
            );
          }
        }

        // Se for m√≠dia, ajustar conte√∫do da mensagem
        if (mediaUrl && messageType !== 'TEXT') {
          messageContent = `[${messageType}] ${mediaFileName || 'Arquivo'}`;
        }

        // Timestamp da mensagem
        const timestamp = message.messageTimestamp
          ? new Date(message.messageTimestamp * 1000)
          : new Date();

        // ACK (status de entrega)
        let ack = 1; // Default: sent
        if (message.status === 'DELIVERY_ACK') ack = 2;
        if (message.status === 'READ') ack = 3;

        console.log(
          `üì§ [WebSocket] Criando mensagem no banco: chatId=${chat.id}, fromMe=${fromMe}, type=${messageType}`
        );

        // Criar mensagem no banco
        const newMessage = await prisma.message.create({
          data: {
            chatId: chat.id,
            phone: phone,
            fromMe: fromMe,
            body: messageContent,
            mediaUrl: mediaUrl,
            type: messageType,
            timestamp: timestamp,
            ack: ack,
            messageId: messageId
          }
        });

        console.log(
          `‚úÖ [WebSocket] Mensagem criada no banco: ${newMessage.id}`
        );

        // Atualizar √∫ltima mensagem do chat e contador de n√£o lidas
        const updatedChat = await prisma.chat.update({
          where: { id: chat.id },
          data: {
            lastMessage: messageContent,
            lastMessageAt: timestamp,
            unreadCount: fromMe ? chat.unreadCount : chat.unreadCount + 1
          }
        });

        console.log(
          `üìä [WebSocket] Chat atualizado: lastMessage="${messageContent}", unreadCount=${updatedChat.unreadCount}`
        );

        // Emitir para frontend
        websocketService.emitToTenant(tenantId, 'chat:message', {
          chatId: chat.id,
          message: newMessage,
          chat: updatedChat
        });

        console.log(
          `üöÄ [WebSocket] Evento chat:message emitido para tenant ${tenantId}`
        );
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket] Erro ao processar mensagem:`, error);
    }
  }

  /**
   * Processa atualiza√ß√£o de mensagem (status, edi√ß√£o, etc)
   */
  private async handleMessageUpdate(
    data: any,
    instanceName: string,
    tenantId: string
  ): Promise<void> {
    try {
      const updates =
        data.updates || data.update || (Array.isArray(data) ? data : [data]);

      for (const update of Array.isArray(updates) ? updates : [updates]) {
        const messageId = update.key?.id;
        const status = update.update?.status;

        if (!messageId) continue;

        // Atualizar status da mensagem
        await prisma.message.updateMany({
          where: {
            whatsappMessageId: messageId,
            tenantId
          },
          data: {
            ...(status && { status: status.toUpperCase() })
          }
        });

        console.log(`‚úÖ [WebSocket] Mensagem atualizada: ${messageId}`);
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket] Erro ao atualizar mensagem:`, error);
    }
  }

  /**
   * Processa novo chat
   */
  private async handleChatUpsert(
    data: any,
    instanceName: string,
    tenantId: string
  ): Promise<void> {
    try {
      // ‚úÖ Extrair dados corretos (Evolution envia { event, instance, data: {...} })
      const chatData = data.data || data;
      const chats =
        chatData.chats || (Array.isArray(chatData) ? chatData : [chatData]);

      for (const chat of chats) {
        const remoteJid = chat.id || chat.remoteJid;

        if (!remoteJid) continue;

        // Extrair phone correto
        const isGroup = remoteJid.includes('@g.us');
        const phone = isGroup
          ? remoteJid
          : remoteJid.replace('@s.whatsapp.net', '');

        // Verificar se chat j√° existe
        const existingChat = await prisma.chat.findFirst({
          where: {
            phone: phone,
            tenantId
          }
        });

        if (!existingChat) {
          // Buscar sess√£o da inst√¢ncia para associar ao chat
          const session = await prisma.whatsAppSession.findFirst({
            where: {
              name: instanceName,
              tenantId
            }
          });

          const newChat = await prisma.chat.create({
            data: {
              phone: phone,
              tenantId,
              status: 'OPEN',
              sessionId: session?.id, // ‚úÖ Associar sess√£o ao chat
              lastMessageAt: new Date()
            }
          });

          // Emitir para frontend
          websocketService.emitToTenant(tenantId, 'chat:new', newChat);

          console.log(`‚úÖ [WebSocket] Novo chat criado: ${phone}`);
        }
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket] Erro ao processar novo chat:`, error);
    }
  }

  /**
   * Processa atualiza√ß√£o de chat
   */
  private async handleChatUpdate(
    data: any,
    instanceName: string,
    tenantId: string
  ): Promise<void> {
    try {
      // ‚úÖ Extrair dados corretos (Evolution envia { event, instance, data: {...} })
      const chatData = data.data || data;
      const chats =
        chatData.chats || (Array.isArray(chatData) ? chatData : [chatData]);

      for (const chat of chats) {
        const remoteJid = chat.id || chat.remoteJid;

        if (!remoteJid) continue;

        // Extrair phone correto
        const isGroup = remoteJid.includes('@g.us');
        const phone = isGroup
          ? remoteJid
          : remoteJid.replace('@s.whatsapp.net', '');

        // Atualizar chat
        await prisma.chat.updateMany({
          where: {
            phone: phone,
            tenantId
          },
          data: {
            ...(chat.unreadMessages !== undefined && {
              unreadCount: chat.unreadMessages
            })
          }
        });

        // Emitir para frontend
        websocketService.emitToTenant(tenantId, 'chat:update', {
          phone,
          updates: chat
        });

        console.log(`‚úÖ [WebSocket] Chat atualizado: ${phone}`);
      }
    } catch (error) {
      console.error(`‚ùå [WebSocket] Erro ao atualizar chat:`, error);
    }
  }

  // =================================================================
  // GERENCIAMENTO DE CONEX√ïES
  // =================================================================

  /**
   * Desconecta uma inst√¢ncia
   */
  disconnectInstance(instanceName: string): void {
    const socket = this.connections.get(instanceName);
    if (socket) {
      socket.disconnect();
      this.connections.delete(instanceName);
      this.reconnectAttempts.delete(instanceName);
      console.log(`‚úÖ [WebSocket] Inst√¢ncia desconectada: ${instanceName}`);
    }
  }

  /**
   * Desconecta todas as inst√¢ncias
   */
  disconnectAll(): void {
    console.log(`üîå [WebSocket] Desconectando todas as inst√¢ncias...`);
    this.connections.forEach((socket, instanceName) => {
      socket.disconnect();
      console.log(`‚úÖ [WebSocket] Inst√¢ncia desconectada: ${instanceName}`);
    });
    this.connections.clear();
    this.reconnectAttempts.clear();
  }

  /**
   * Verifica se uma inst√¢ncia est√° conectada
   */
  isConnected(instanceName: string): boolean {
    const socket = this.connections.get(instanceName);
    return socket?.connected || false;
  }

  /**
   * Retorna lista de inst√¢ncias conectadas
   */
  getConnectedInstances(): string[] {
    return Array.from(this.connections.keys());
  }
}

export const evolutionWebSocketClient = new EvolutionWebSocketClient();
